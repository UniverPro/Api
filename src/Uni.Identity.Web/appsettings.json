{
  "ConnectionStrings": {
    "IdentityServerConfiguration": "Data Source=localhost;Initial Catalog=IdentityConfig;Integrated Security=True",
    "IdentityServerTokens": "Data Source=localhost;Initial Catalog=IdentityTokens;Integrated Security=True"
  },
  "DataProtectionDirectory": "./data-protection",
  "Serilog": {
    "Using": ["Serilog.Sinks.Console"],
    "MinimumLevel": "Warning",
    "WriteTo": [
      {
        "Name": "Console",
        "Args": {
          "outputTemplate":
            "[{Timestamp:O} {Level:u4}] ({MachineName}/{ProcessId}/{ThreadId}) {Message:lj}{NewLine}{Exception}"
        }
      }
    ],
    "Enrich": [
      "FromLogContext",
      "WithMachineName",
      "WithThreadId",
      "WithProcessId"
    ],
    "Destructure": [
      {
        "Name": "ToMaximumDepth",
        "Args": { "maximumDestructuringDepth": 4 }
      },
      {
        "Name": "ToMaximumStringLength",
        "Args": { "maximumStringLength": 100 }
      },
      {
        "Name": "ToMaximumCollectionCount",
        "Args": { "maximumCollectionCount": 10 }
      }
    ]
  },
  "AllowedHosts": "*",
  "IdentityServer": {
    "Common": {
      "AllowRememberLogin": true,
      "LoginDuration": "0.18:00:00",
      "ShowLogoutPrompt": true,
      "AutomaticRedirectAfterSignOut": true,
      "EnableOfflineAccess": true,
      "OfflineAccessDisplayName": "Оффлайн доступ",
      "OfflineAccessDescription": "Доступ к вашим данным и ресурсам даже когда вы оффлайн",
      "MustChooseOneErrorMessage": "Необходимо выбрать минимум одно разрешение",
      "InvalidSelectionErrorMessage": "Некорректный выбор"
    },
    "SigningCertificate": {
      "Location": "./certs/identity.pfx",
      "Password": "Ntcnbhjdfybt"
    },
    "ResourcesAndClients": {
      "ApiResources": [
        {
          "Name": "api_main",
          "DisplayName": "Main Application HTTP API",
          "Scopes": [
            {
              "Name": "api_main_scope",
              "DisplayName": "Main Application API Scope",
              "Description": null,
              "Required": true,
              "UserClaims": [
                "name",
                "email",
                "role",
                "permissions"
              ]
            }
          ],
          "ApiSecrets": [
            {
              "Type": "SharedSecret",
              "Value": "ifAcJhGrp/l4xLY8SsHjpiLAUoKHBbX3Lwfc54MpViw=" // api_main_secret
            }
          ]
        }
      ],
      "IdentityResources": [
        {
          "Name": "openid",
          "DisplayName": "Your user ID",
          "Required": true,
          "UserClaims": [
            "sub"
          ]
        },
        {
          "Name": "profile",
          "DisplayName": "Your profile",
          "Description": "Information about your profile (first name, last name, etc.)",
          "Required": true,
          "UserClaims": [
            "name",
            "family_name",
            "given_name",
            "middle_name",
            "nickname",
            "preferred_username",
            "profile",
            "picture",
            "website",
            "gender",
            "birthdate",
            "zoneinfo",
            "locale",
            "updated_at",
            "role",
            "permissions"
          ]
        }
      ],
      "Clients": [
        {
          // Unique ID of the client
          "ClientId": "front",

          // Client display name (used for logging and consent screen)
          "ClientName": "Angular Client",

          // URI to further information about client (used on consent screen)
          "ClientUri": "http://localhost:4200",

          // Specifies whether a consent screen (a screen with a list of permissions and checkboxes to specify to which give access).
          "RequireConsent": false,

          "AlwaysIncludeUserClaimsInIdToken": true,

          // Set 'true' to allow the release of refresh_token
          "AllowOfflineAccess": false,

          // Set 'true' to require client_secret from client
          "RequireClientSecret": false,

          // Specifies whether this client is allowed to request access tokens via the browser.
          // This is useful to harden flows that allow multiple response types
          // e.g. by disallowing a hybrid flow client that is supposed to use code id_token
          // to add the token response type and thus leaking the token to the browser.
          "AllowAccessTokensViaBrowser": true,

          // Gets or sets a value indicating whether the access token (and its claims)
          // should be updated on a refresh token request.
          "UpdateAccessTokenClaimsOnRefresh": true,

          // Possible values: implicit, hybrid, authorization_code, client_credentials, password
          // List of allowed grants (almost equal to OpenID Connect Flow)
          "AllowedGrantTypes": [
            "implicit"
          ],

          // List of scopes allowed for the client
          // The client can request a smaller set of scopes than he is allowed to use
          "AllowedScopes": [
            "openid",
            "profile",
            "api_main_scope"
          ],

          // Lifetime to identity token in seconds (defaults to 300 seconds / 5 minutes)
          "IdentityTokenLifetime": 300,

          // Lifetime of access token in seconds (defaults to 3600 seconds / 1 hour)
          "AccessTokenLifetime": 3600,

          // Specifies whether the access token is a reference token or a self contained JWT token (Jwt, Reference).
          "AccessTokenType": "Reference",

          // Specifies the allowed URIs to return tokens or authorization codes to
          "RedirectUris": [
            "http://localhost:4200",
            "http://localhost:4200/login",
            "http://localhost:4200/silent-renew",
            "http://localhost:4200/popup"
          ],

          // Specifies allowed URIs to redirect to after logout
          "PostLogoutRedirectUris": [
            "http://localhost:4200/logout"
          ],

          // This will be used by the default CORS policy service implementations
          // (In-Memory and EF) to build a CORS policy for JavaScript clients
          "AllowedCorsOrigins": [
            "http://localhost:4200"
          ]
        },
        {
          "ClientId": "telegram_bot",
          "ClientName": "Telegram Bot",
          "RequireConsent": false,
          "AllowOfflineAccess": false,
          "AllowedGrantTypes": [
            "client_credentials"
          ],
          "AllowedScopes": [
            "api_main_scope"
          ],
          "AccessTokenLifetime": 3600,
          "AccessTokenType": "Reference",
          "ClientSecrets": [
            {
              "Type": "SharedSecret",
              "Value": "5Iylni/2/FlB2Zuuz+g4CrwPgfUIdUzxZiiPfyinDBQ=" // telegram_bot_secret
            }
          ]
        },
        {
          "ClientId": "password_client",
          "ClientName": "Password Client",
          "RequireConsent": false,
          "AllowOfflineAccess": true,
          "AllowedGrantTypes": [
            "password"
          ],
          "AllowedScopes": [
            "openid",
            "profile",
            "api_main_scope"
          ],
          "AllowAccessTokensViaBrowser": false,
          "UpdateAccessTokenClaimsOnRefresh": true,
          "IdentityTokenLifetime": 300,
          "AccessTokenLifetime": 3600,
          "AuthorizationCodeLifetime": 300,
          "AccessTokenType": "Reference",
          "ClientSecrets": [
            {
              "Type": "SharedSecret",
              "Value": "bT5FzrrVbBnfK3Q8yD00t4H9MCdY3XyeWrnNn9E6NZ0=" // password_client_secret
            }
          ]
        },
        {
          "ClientId": "swaggerui",
          "ClientName": "Swagger UI",
          "RequireConsent": false,
          "AllowOfflineAccess": false,
          "AllowedGrantTypes": [
            "implicit"
          ],
          "AllowedScopes": [
            "openid",
            "profile",
            "api_main_scope"
          ],
          "AllowAccessTokensViaBrowser": true,
          "UpdateAccessTokenClaimsOnRefresh": true,
          "IdentityTokenLifetime": 300,
          "AccessTokenLifetime": 3600,
          "AuthorizationCodeLifetime": 300,
          "AccessTokenType": "Reference",

          "RedirectUris": [
            "http://localhost:5001/swagger/oauth2-redirect.html"
          ],

          "PostLogoutRedirectUris": [
            "http://localhost:5001/swagger/"
          ]
        }
      ]
    }
  }
}